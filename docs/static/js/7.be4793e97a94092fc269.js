webpackJsonp([7],{PfO0:function(t,v,a){"use strict";Object.defineProperty(v,"__esModule",{value:!0});var r={props:{index:{type:Number,default:function(){return null}}},data:function(){return{}}},i={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("section",{staticClass:"section-container"},[a("div",{attrs:{id:"main1"}},[a("h4",[t._v("Ammo物理引擎")]),t._v(" "),a("div",{attrs:{id:"main2"}},[a("div",{attrs:{id:"content1"}},[a("p",[t._v("\n          Bullet是跨平台的开源物理引擎，而Ammo是Bullet转化为JavaScript语言的产品，可以帮助实现碰撞检测、力学模拟，还提供多种关节实现。\n        ")]),t._v(" "),a("p",[a("strong",[t._v("一、常用的类：")])]),t._v(" "),a("p",[a("strong",[t._v("1. btVector3类：三维向量类 ")])]),t._v(" "),a("p",[t._v("\n          该类使用频率很高，由3个浮点数类型的x、y、z变量组成，可以表示速度、点、力等向量。\n          "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"200",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"368",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"200",valign:"top"}},[a("p",[t._v("btVector3()")])]),t._v(" "),a("td",{attrs:{width:"368",valign:"top"}},[a("p",[t._v("创建一个三维分量初始值都为零的三维向量对象")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"200",valign:"top"}},[a("p",[t._v("btVector3(x,y,z)")])]),t._v(" "),a("td",{attrs:{width:"368",valign:"top"}},[a("p",[t._v("创建三维向量对象，三个坐标值分别为x、y、z")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"221",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"347",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"221",valign:"top"}},[a("p",[t._v("setX(x)")])]),t._v(" "),a("td",{attrs:{width:"347",valign:"top"}},[a("p",[t._v("设置向量的x坐标值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"221",valign:"top"}},[a("p",[t._v("setY(y)")])]),t._v(" "),a("td",{attrs:{width:"347",valign:"top"}},[a("p",[t._v("设置向量的y坐标值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"221",valign:"top"}},[a("p",[t._v("setY(z)")])]),t._v(" "),a("td",{attrs:{width:"347",valign:"top"}},[a("p",[t._v("设置向量的z坐标值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"221",valign:"top"}},[a("p",[t._v("setValue(x,y,z)")])]),t._v(" "),a("td",{attrs:{width:"347",valign:"top"}},[a("p",[t._v("设置向量的坐标")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"221",valign:"top"}},[a("p",[t._v("normalize()")])]),t._v(" "),a("td",{attrs:{width:"347",valign:"top"}},[a("p",[t._v("获取向量归一化后的单位向量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"221",valign:"top"}},[a("p",[t._v("dot(btVector3 v)")])]),t._v(" "),a("td",{attrs:{width:"347",valign:"top"}},[a("p",[t._v("获取与向量v的点积")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"221",valign:"top"}},[a("p",[t._v("op_mul(btVector3 v)")])]),t._v(" "),a("td",{attrs:{width:"347",valign:"top"}},[a("p",[t._v("获取与向量v的叉积")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"221",valign:"top"}},[a("p",[t._v("op_add(btVector3 v)")])]),t._v(" "),a("td",{attrs:{width:"347",valign:"top"}},[a("p",[t._v("获取与向量v的和")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"221",valign:"top"}},[a("p",[t._v("op_sub(btVector3 v)")])]),t._v(" "),a("td",{attrs:{width:"347",valign:"top"}},[a("p",[t._v("获取与向量v的差")])])])])]),t._v(" "),a("p",[a("strong",[t._v("2. btTransform类：变换类")])]),t._v(" "),a("p",[t._v("\n          该类由位置和方向组合而成，用来表示刚体的变换，如平移、旋转等。\n          "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"224",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"344",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"224",valign:"top"}},[a("p",[t._v("btTransform()")])]),t._v(" "),a("td",{attrs:{width:"344",valign:"top"}},[a("p",[t._v("无参构造函数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"224",valign:"top"}},[a("p",[t._v("btTransform(btQuaternion q, btVector3 v)")])]),t._v(" "),a("td",{attrs:{width:"344",valign:"top"}},[a("p",[t._v("\n                  变换的构造函数，q表示变换旋转信息的四元数，v表示变换平移信息的向量\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"193",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"375",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"193",valign:"top"}},[a("p",[t._v("setIdentity()")])]),t._v(" "),a("td",{attrs:{width:"375",valign:"top"}},[a("p",[t._v("\n                  将当前变换对象设置为初始状态，即将旋转变换矩阵归一化，平移向量3个维度的分量归零\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"193",valign:"top"}},[a("p",[t._v("setOrigin(btVector3 origin)")])]),t._v(" "),a("td",{attrs:{width:"375",valign:"top"}},[a("p",[t._v("设置平移变换的向量，origin为平移变换的3x3矩阵")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"193",valign:"top"}},[a("p",[t._v("setRotation(btQuaternion rotation)")])]),t._v(" "),a("td",{attrs:{width:"375",valign:"top"}},[a("p",[t._v("\n                  设置当前变换对象的旋转变换数据，rotation表示存储旋转数据的四元数对象\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"193",valign:"top"}},[a("p",[t._v("getOrigin()")])]),t._v(" "),a("td",{attrs:{width:"375",valign:"top"}},[a("p",[t._v("换取变换的原点")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"193",valign:"top"}},[a("p",[t._v("getRotation()")])]),t._v(" "),a("td",{attrs:{width:"375",valign:"top"}},[a("p",[t._v("换取表示旋转信息的四元数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"193",valign:"top"}},[a("p",[t._v("getBasic()")])]),t._v(" "),a("td",{attrs:{width:"375",valign:"top"}},[a("p",[t._v("换取表示变换信息的3x3矩阵")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"193",valign:"top"}},[a("p",[t._v("setFromOpenGLMatrix(m)")])]),t._v(" "),a("td",{attrs:{width:"375",valign:"top"}},[a("p",[t._v("\n                  设置变换的矩阵，m为旋转平移缩放向量合成的4x4变换矩阵首地址\n                ")])])])])]),t._v(" "),a("p",[t._v("btQuaternion类表示的四元数，用于对三维向量进行变换。")]),t._v(" "),a("p",[a("strong",[t._v("3. btRigidBody类：刚体类")])]),t._v(" "),a("p",[t._v("\n          该类用于存储刚体的一些属性信息，包括线速度、角速度、摩擦系数等，其中封装了多种方法，用于设置和获取相关属性信息。\n          "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"239",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"329",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"239",valign:"top"}},[a("p",[t._v("\n                  btRigidBody(btRigidBodyConstructionInfo constructionInfo)\n                ")])]),t._v(" "),a("td",{attrs:{width:"329",valign:"top"}},[a("p",[t._v("创建一个刚体对象，constructionInfo为刚体信息对象")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("getCenterOfMassTransform()")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("获取重心的变换，返回值为获取的四元数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("setCenterOfMassTransform(btTransform xform)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("设置刚体变换，参数xform表示需要变换的对象")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("setDamping(lin_damping, ang_damping)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("设置现行阻尼系数和角阻尼系数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("getLinearVelocity()")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("获取线速度，返回值为获取的线速度向量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("getAngularVelocity()")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("获取加速度，返回值为获取的角速度向量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("setAngularFactor(btVector3 angularFactort)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("获取角度因子，angularFactort为要设置的角度因子")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("getMotionState()")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("获取刚体的形状，返回值为获取的形状指针")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("applyCentralForce(btVector3 force)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("应用中心力，force为提供的力向量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("applyTorch(btVector3 torquel)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("应用扭矩，torque为要应用的刚体扭矩")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("applyForce(btVector3 force, btVector3 rel_pos)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("应用力，force为要应用的力，rel_pos为施加力的位置")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("applyCentralImpulse(btVector3 impulse)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("应用中心冲量，impulse为要应用的冲量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("applyTorqueImpulse(btVector3 torque)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("应用扭矩冲量，torque为要应用的冲量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("applyImpulse ( btVector3 impulse, btVector3 rel_pos)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("\n                  应用冲量，impulse为要应用的冲量，rel_pos为要施加冲量的位置坐标\n                ")])])])])]),t._v(" "),a("p",[a("strong",[t._v("4. btDynamicsWorld类：物理世界类")])]),t._v(" "),a("p",[t._v("\n          该类有两个重要的子类，离散物理世界类btDiscreteDynamicsWorld和用于测试的类btSimpleDynamicsWorld类。\n          "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"239",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"329",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"239",valign:"top"}},[a("p",[t._v("\n                  btDynamicsWorld ( btbtDispatcher dispatcher,\n                  btBroadphaseInterface broadphase, btCollisionConfiguration\n                  conf)\n                ")])]),t._v(" "),a("td",{attrs:{width:"329",valign:"top"}},[a("p",[t._v("\n                  物理世界类构造器，dispatcher为碰撞检测算法分配器引用，conf为碰撞检测配置信息\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("stepSimulation(timeStep)")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("进行世界物理模拟，timeStep为时间步进")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("addConstraint(btTypedConstraint constraint)")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("在物理世界中添加约束，constraint为约束引用")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("removeConstraint(btTypedConstraint constraint)")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("在物理世界删除约束，constraint为约束引用")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("setGravity(gravity)")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("设置物理世界的重力，gravity为重力向量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("addRidgidBody(btRidgidBody body)")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("在物理世界添加刚体，body为要添加的刚体")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("removeRidgidBody(btRidgidBody body)")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("删除物理世界的刚体")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("getNumConstraint()")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("获取物理世界的约束总数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("getConstraint(index)")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("获取物理世界中的指定约束，index为约束索引")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("getNumCollisionObjects()")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("获取物理世界中碰撞物体的数量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("getCollisionObjectArray()")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("获取物理世界中碰撞物体的数组")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("\n                  contactTest ( btCollisionObject colObj,\n                  ContactResultCallback resultCallback)\n                ")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("\n                  进行接触检测，colObj为指向碰撞物体类的引用，resultCallback为接触回调类的对象\n                ")])])])])]),t._v(" "),a("p",[a("strong",[t._v("5. btDiscreteDynamicsWorld类：离散物理世界类")])]),t._v(" "),a("p",[t._v("\n          实际开发中常使用该类来创建物理世界对象，创建时要使用构造器，需要给出碰撞检测算法分配器、碰撞检测粗测算法接口和碰撞检测配置接口。\n          "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"280",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"288",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"280",valign:"top"}},[a("p",[t._v("\n                  btDiscreteDynamicsWorld ( btbtDispatcher dispatcher,\n                  btBroadphaseInterface pairCache,btConstraintSolver\n                  constraintSolver, btCollisionConfiguration conf)\n                ")])]),t._v(" "),a("td",{attrs:{width:"288",valign:"top"}},[a("p",[t._v("\n                  离散物理世界类构造器，dispatcher为碰撞检测算法分配器引用，pairCache为碰撞粗测算法接口，constraintSolver为约束解决器引用，conf为碰撞检测配置信息\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("btCollisionWorld getCollisionWorld()")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("获取当前物理世界的引用")])])])])]),t._v(" "),a("p",[a("strong",[t._v("6. btSoftRigidDynamicsWorld类：支持模拟软体的物理世界")])]),t._v(" "),a("p",[t._v("\n          可支持模拟软体，继承了btDiscreteDynamicsWorld类。所谓软体，不具有固定形状，可像软布一样改变本身形状的物体。\n          "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"293",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"275",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"293",valign:"top"}},[a("p",[t._v("\n                  btSoftRigidDynamicsWorld ( btbtDispatcher dispatcher,\n                  btBroadphaseInterface pairCache,btConstraintSolver\n                  constraintSolver, btCollisionConfiguration conf,\n                  btSoftBodySolver softBodySolver)\n                ")])]),t._v(" "),a("td",{attrs:{width:"275",valign:"top"}},[a("p",[t._v("\n                  离散物理世界类构造器，dispatcher为碰撞检测算法分配器引用，pairCache为碰撞粗测算法接口，constraintSolver为约束解决器引用，conf为碰撞检测配置信息\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("addSoftBody(btSoftBody body)")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("向物理世界添加物体，body为指向软体的引用")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("removeSoftBody(btSoftBody body)")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("从物理世界删除指定软体")])])])])]),t._v(" "),a("p",[a("strong",[t._v("7. btCollisionShape类：碰撞形状类")])]),t._v(" "),a("p",[t._v("\n          该类封装了一些判断碰撞形状类型的方法，所有碰撞形状都直接或间接继承自此类。方法有：\n          "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("btCollisionShape ( )")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("碰撞形状构造器")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"258",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"310",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"258",valign:"top"}},[a("p",[t._v("setLocalScaling(btVector3 scaling)")])]),t._v(" "),a("td",{attrs:{width:"310",valign:"top"}},[a("p",[t._v("设置缩放比")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"258",valign:"top"}},[a("p",[t._v("calculateLocalInertia(mass, btVector3 inertia)")])]),t._v(" "),a("td",{attrs:{width:"310",valign:"top"}},[a("p",[t._v("计算惯性，mass为质量，inertia为惯性")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"258",valign:"top"}},[a("p",[t._v("setMargin(margin)")])]),t._v(" "),a("td",{attrs:{width:"310",valign:"top"}},[a("p",[t._v("设置碰撞形状边缘数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"258",valign:"top"}},[a("p",[t._v("getMargin()")])]),t._v(" "),a("td",{attrs:{width:"310",valign:"top"}},[a("p",[t._v("获取碰撞形状边缘数")])])])])]),t._v(" "),a("p",[a("strong",[t._v("8. btBoxShape类：长方体盒碰撞形状")])]),t._v(" "),a("p",[t._v("\n          该类可用于盒子、箱子等规则物体。 "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"257",valign:"top"}},[a("p",[t._v("btBoxShape(btVector3 boxHalfExtents)")])]),t._v(" "),a("td",{attrs:{width:"311",valign:"top"}},[a("p",[t._v("构造器，boxHalfExtents表示立方体盒子的半区域")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"258",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"310",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"258",valign:"top"}},[a("p",[t._v("setMargin(margin)")])]),t._v(" "),a("td",{attrs:{width:"310",valign:"top"}},[a("p",[t._v("设置碰撞形状边缘数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"258",valign:"top"}},[a("p",[t._v("getMargin()")])]),t._v(" "),a("td",{attrs:{width:"310",valign:"top"}},[a("p",[t._v("获取碰撞形状边缘数")])])])])]),t._v(" "),a("p",[a("strong",[t._v("9. btStaticPlaneShape类：静态平面形状")])]),t._v(" "),a("p",[t._v("\n          该类表示静态的平面，如地面、屋顶等，创建时需要给出法向量。 "),a("br"),t._v("\n          1）构造器为：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"252",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"316",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"252",valign:"top"}},[a("p",[t._v("\n                  btStaticPlaneShape(btVector3 planeNormal, float\n                  planeConstant)\n                ")])]),t._v(" "),a("td",{attrs:{width:"316",valign:"top"}},[a("p",[t._v("\n                  静态平面构造器，参数planeNormal为平面法向量，planeConstant为平面上任意一点\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"248",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"320",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"248",valign:"top"}},[a("p",[t._v("getPlaneNormal()")])]),t._v(" "),a("td",{attrs:{width:"320",valign:"top"}},[a("p",[t._v("获取平面形状的法向量")])])])])]),t._v(" "),a("p",[a("strong",[t._v("10. btSphereShape类：球体形状")])]),t._v(" "),a("p",[t._v("\n          该类表示一个球体。 "),a("br"),t._v("\n          1）构造器为：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("btSphereShape(radius)")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("球体碰撞形状构造器，radius为球半径")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("setMargin(margin)")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("设置碰撞形状边缘数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("getMargin()")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("获取碰撞形状边缘数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("getRadius( )")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("获取球的半径")])])])])]),t._v(" "),a("p",[a("strong",[t._v("11. btCylinderShape类：圆柱形状")])]),t._v(" "),a("p",[t._v("\n          该类表示一个圆柱形状，如杆、金币、石柱等都可以采用此类，但碰撞计算量较大，不如胶囊。\n          "),a("br"),t._v("\n          1）构造器为：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("btCylinderShape(btVector3 halfExtents)")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("\n                  圆柱对象构造器，halfExtents为圆柱的半区域，三维分量，第1和3维表示圆柱的长短半径，第2维是长度\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("getRadius( )")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("获取圆柱的半径")])])])])]),t._v(" "),a("p",[a("strong",[t._v("12. btCapsuleShape类：胶囊形状")])]),t._v(" "),a("p",[t._v("\n          该类表示一个胶囊形状，碰撞计算量比圆柱小，旗杆、铅笔等一般使用该类。\n          "),a("br"),t._v("\n          1）构造器为：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"205",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"363",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"205",valign:"top"}},[a("p",[t._v("btCapsuleShape(float radius, float height)")])]),t._v(" "),a("td",{attrs:{width:"363",valign:"top"}},[a("p",[t._v("\n                  胶囊碰撞形状对象构造器，参数radius为两端球面的半径，height为中间圆柱的长度\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("getRadius( )")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("获取胶囊截面的半径")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("getHalfHeight( )")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("获取中间圆柱部分长度值的一半")])])])])]),t._v(" "),a("p",[a("strong",[t._v("13. btConeShape类：圆锥形状类")])]),t._v(" "),a("p",[t._v("\n          该类表示圆锥形状。 "),a("br"),t._v("\n          1）构造器为：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"205",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"363",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"205",valign:"top"}},[a("p",[t._v("btConeShape(float radius, float height)")])]),t._v(" "),a("td",{attrs:{width:"363",valign:"top"}},[a("p",[t._v("\n                  圆锥碰撞形状对象构造器，参数radius为圆锥的半径，height为圆锥的高度\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"181",valign:"top"}},[a("p",[t._v("getRadius( )")])]),t._v(" "),a("td",{attrs:{width:"387",valign:"top"}},[a("p",[t._v("获取圆锥的半径")])])])])]),t._v(" "),a("p",[a("strong",[t._v("14. btCompoundShape类：复合形状")])]),t._v(" "),a("p",[t._v("\n          该类表示一个复合形状，可以通过创建多个单一形状组合成一个复合形状对象。\n          "),a("br"),t._v("\n          1）构造器为：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"183",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"385",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"183",valign:"top"}},[a("p",[t._v("btCompoundShape()")])]),t._v(" "),a("td",{attrs:{width:"385",valign:"top"}},[a("p",[t._v("复合形状构造器")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"216",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"352",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"216",valign:"top"}},[a("p",[t._v("\n                  addChildShape ( btTransform localTransform, btCollisionShape\n                  shape)\n                ")])]),t._v(" "),a("td",{attrs:{width:"352",valign:"top"}},[a("p",[t._v("\n                  向组合形状中添加子形状，localTransform为子形状的变换，shape为添加的子形状\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"216",valign:"top"}},[a("p",[t._v("removeChildShape( childShapeindex)")])]),t._v(" "),a("td",{attrs:{width:"352",valign:"top"}},[a("p",[t._v("\n                  从组合形状中删除指定的子形状， childShapeindex为子形状索引\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"216",valign:"top"}},[a("p",[t._v("getNumChildShapes()")])]),t._v(" "),a("td",{attrs:{width:"352",valign:"top"}},[a("p",[t._v("获取当前组合形状中子形状的数量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"216",valign:"top"}},[a("p",[t._v("getChildShape(index)")])]),t._v(" "),a("td",{attrs:{width:"352",valign:"top"}},[a("p",[t._v("获取组合形状中指定索引编号的子形状，index为子形状索引")])])])])]),t._v(" "),a("p",[a("strong",[t._v("15. btRaycastVehicle类：交通工具类 ")])]),t._v(" "),a("p",[t._v("\n          交通工具类是模拟现实世界中的交通工具，有刚体车身、四个轮子，支持前轮驱动和后轮驱动，支持车轮转向等，提供了添加和更新车轮的方法，设置车轮刹车的方法。\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("\n                  updateAction ( btCollisionWorld collisionWorld, btScalar\n                  step)\n                ")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("\n                  更新交通工具，collisionWorld为物理世界的引用，step为步长\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("btTransform getChassisWorldTransform()")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("获取交通工具的变换对象")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("updateVehicle(btScalar step)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("更新交通工具，step为更新的步长")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("resetSuspension()")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("重置悬挂系统的参数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("btScalar getSteeringValue (wheelindex)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("获取操纵车轮的系数，wheelindex表示车轮索引值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("setSteeringValue(steering, wheelindex)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("设置操纵车轮系数的值，steering为要设置的值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("applyEngineForce(btScalar force, int  wheelindex)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("车轮上应用力，force为力的大小，wheelindex表示车轮索引值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("updateWheelTransform(wheelindex)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("更新车轮的变换对象，wheelindex表示车轮索引值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("\n                  btWheelInfo addWheel ( btVector3 connectionPointCS0,\n                  btVector3 wheelDirectionCS0, btVector3 wheelAxleCS, btScalar\n                  suspensionRestLength, btScalar wheelRsdius, btVehicleTuning\n                  tuning,boolean isFrontWheel)\n                ")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("\n                  给交通工具添加车轮，connectionPointCS0为车轮连接点，wheelDirectionCS0为车轮方向，wheelAxleCS为车轮的轴向量，suspensionRestLength为车轮悬挂系统在松弛态下的长度，wheelRsdius为车轮半径，tuning为协调器，isFrontWheel为是否添加驱动力\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("getNumWheels()")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("获取交通工具上的车轮总数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("btWheelInfo getWheelInfo(index)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("获取交通工具上的车轮，index为车轮索引")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("setBrake(btScalar brake, index)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("设置刹车系数，brake为要设置的刹车系数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("updateSuspension (btScalar deltaTime)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("更新悬挂系统，deltaTime为更新步长")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("updateFriction(btScalar timeStep)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("更新摩擦，timeStep为更新步长")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("btRigidBody getRigidBody()")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("获取交通工具刚体")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("btVector3 getForwardVector()")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("获取交通工具的前进向量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("btScalar getCurrentSpeedKmHour()")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("获取交通工具的当前速度")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("setCoordinateSystem(rightIndex, upIndex, forwardIndex)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("\n                  设置坐标系统，rightIndex为右方向的索引，upIndex为上方向索引，forwardIndex为前进方向索引\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("getUserConstrainType ()")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("获取关节类型")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("setUserConstrainType(userConstraintType)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("设置关节类型")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("setUserConstraintId(uid)")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("设置关节id")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"274",valign:"top"}},[a("p",[t._v("getUserConstraintId()")])]),t._v(" "),a("td",{attrs:{width:"294",valign:"top"}},[a("p",[t._v("获取关节id")])])])])]),t._v(" "),a("p",[a("strong",[t._v("16. btSoftBodyHelps类：软体")])]),t._v(" "),a("p",[t._v("\n          软体是不同于固定形状的刚体，如绳索，可以实现拉伸、弯曲等不同姿态，如软布可以呈现上下波动。创建软体时必须使用软体帮助类，该类提供了创建软体的方法：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"261",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"307",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"261",valign:"top"}},[a("p",[t._v("\n                  CreateRope ( btSoftBodyWorldInfo worldInfo, btVector3 from,\n                  btVector3 to, res, fixeds)\n                ")])]),t._v(" "),a("td",{attrs:{width:"307",valign:"top"}},[a("p",[t._v("\n                  创建绳索软体的方法，worldInfo为软体世界信息，from为绳索起点位置，to为绳索终点位置，res为恢复系数，fixeds为坚硬系数\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"261",valign:"top"}},[a("p",[t._v("\n                  CreatePatch(btSoftBodyWorldInfo worldInfo, btVector3\n                  corner00, btVector3 corner10, btVector3 corner01, btVector3\n                  corner11, resx, resy, fixeds, boolean gendiags)\n                ")])]),t._v(" "),a("td",{attrs:{width:"307",valign:"top"}},[a("p",[t._v("\n                  创建软布的方法，worldInfo为软体世界信息，corner00、corner10、corner01、corner11为软布四个角的坐标，resx为顶点列数，resy为顶点行数，gendiags为软布四角是否固定，true表示固定\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"261",valign:"top"}},[a("p",[t._v("\n                  CreateEllipsoid(btSoftBodyWorldInfo worldInfo, btVector3\n                  center, btVector3 radius, res)\n                ")])]),t._v(" "),a("td",{attrs:{width:"307",valign:"top"}},[a("p",[t._v("\n                  创建球软体的方法，worldInfo为软体世界信息，center为中心点坐标，radius为半径，res为恢复系数\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"261",valign:"top"}},[a("p",[t._v("\n                  CreateFromTriMesh(btSoftBody worldInfo, vertives, triangles,\n                  ntriangles, boolean randomizeConstraints)\n                ")])]),t._v(" "),a("td",{attrs:{width:"307",valign:"top"}},[a("p",[t._v("\n                  创建三角形网络软体的方法，worldInfo为软体世界信息，vertices为顶点数组坐标，triangles为顶点索引数组，ntriangles为三角形总数\n                ")])])])])]),t._v(" "),a("p",[a("strong",[t._v("二、关节：")]),a("strong"),a("br"),t._v("\n          关节是两个物体之间的约束，关节的父类为btTypedConstraint类，其他关节都继承自该类，其封装了具体关节的共用方法。\n          "),a("br"),t._v("\n          1）构造器为：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"183",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"385",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"183",valign:"top"}},[a("p",[t._v("btTypedConstraint()")])]),t._v(" "),a("td",{attrs:{width:"385",valign:"top"}},[a("p",[t._v("关节构造器")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"225",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"343",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"225",valign:"top"}},[a("p",[t._v("getBreakingImpulseThreshold()")])]),t._v(" "),a("td",{attrs:{width:"343",valign:"top"}},[a("p",[t._v("获取毁坏关节的最大冲量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"225",valign:"top"}},[a("p",[t._v("setBreakingImpulseThreshold( threshold)")])]),t._v(" "),a("td",{attrs:{width:"343",valign:"top"}},[a("p",[t._v("设置毁坏关节的最大冲量， threshold为要设置的冲量值")])])])])]),t._v(" "),a("p",[t._v("关节主要有铰链关节、滑动关节、六自由度关节、点对点关节等。")]),t._v(" "),a("p",[a("strong",[t._v("1. 铰链关节btHingeConstraint：")])]),t._v(" "),a("p",[t._v("\n          铰链是仅有一个旋转自由度的关节，通过铰链的约束限制，相关刚体仅能绕铰链轴旋转。\n          "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"247",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"321",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"247",valign:"top"}},[a("p",[t._v("\n                  btHingeConstraint ( btRigidBody rbA, btRigidBody rbB,\n                  btVector3 pivotInA, btVector3 pivotInB, btVector3 axisInA,\n                  btVector3 axisInB, boolean useReferenceFrameA)\n                ")])]),t._v(" "),a("td",{attrs:{width:"321",valign:"top"}},[a("p",[t._v("\n                  铰链构造器，参数rbA和rbB为要添加约束的两个刚体，pivotInA和pivotInB分别为对应的中心点，axisInA和axisInB为两个刚体的轴向量，useReferenceFrameA为两个刚体之间的约束关系，正常对应还是交叉对应，默认false\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"247",valign:"top"}},[a("p",[t._v("\n                  btHingeConstraint(btRigidBody rbA, btVector3 pivotInA,\n                  btVector3 axisInA, boolean useReferenceFrameA)\n                ")])]),t._v(" "),a("td",{attrs:{width:"321",valign:"top"}},[a("p",[t._v("\n                  铰链构造器，参数rbA为要添加约束的两个刚体，pivotInA为对应的中心点，axisInA为两个刚体的轴向量，useReferenceFrameA为两个刚体之间的约束关系\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"247",valign:"top"}},[a("p",[t._v("\n                  btHingeConstraint(btRigidBody rbA, btRigidBody rbB,\n                  btTransform rbAFrame, btTransform rbBFrame,  boolean\n                  useReferenceFrameA)\n                ")])]),t._v(" "),a("td",{attrs:{width:"321",valign:"top"}},[a("p",[t._v("\n                  铰链构造器，rbAFrame为第1个刚体的变换对象，rbBFrameaxisInB为第2个刚体的变换对象，useReferenceFrameA为两个刚体之间的约束关系，正常对应还是交叉对应\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"247",valign:"top"}},[a("p",[t._v("\n                  btHingeConstraint(btRigidBody rbA,  btTransform\n                  rbAFrame,  boolean useReferenceFrameA)\n                ")])]),t._v(" "),a("td",{attrs:{width:"321",valign:"top"}},[a("p",[t._v("\n                  铰链构造器，rbAFrame为刚体的变换对象，useReferenceFrameA表示rbA是否与rbAFrame对应，默认false\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("getHingeAngle()")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("获取铰链当前的旋转角度值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("setLimit ( float low, float high)")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("设置铰链的转动范围，low为下限值，high为上限值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("getLowerLimit()")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("获取转动角度的下限值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("getUpperLimit()")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("获取转动角度的上限值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("\n                  enableAngularMotor ( boolean enableMotor, float\n                  targetVelocity, float maxMotorImpulse)\n                ")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("\n                  启动马达，enableMotor为是否允许使用马达，targetVelocity为关节角速度，maxMotorImpulse为最大马达驱动力\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("setAngularOnly(boolean angularOnly)")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("设置是否只开启角转动")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("enableMotor(boolean enableMotor)")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("设置是否开启马达")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("setMaxMotorImpulse(maxMotorImpluse)")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("设置马达的最大冲量")])])])])]),t._v(" "),a("p",[t._v("马达用于模拟提供动力的部件。")]),t._v(" "),a("p",[a("strong",[t._v("2. 滑动关节btSliderConstraint：")])]),t._v(" "),a("p",[t._v("\n          滑动关节是一种仅有平移和旋转自由度的关节，如螺丝和螺母。 "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"224",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"344",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"224",valign:"top"}},[a("p",[t._v("\n                  btSliderConstraint(btRigidBody rbA, btRigidBody rbB,\n                  btTransform frameInA, btTransform frameInB, boolean\n                  useLinearReferenceFrameA)\n                ")])]),t._v(" "),a("td",{attrs:{width:"344",valign:"top"}},[a("p",[t._v("\n                  滑动关节构造器，rbA和rbB为两个刚体，frameInA和frameInB分别为从约束位置到刚体质心位置的变换，useLinearReferenceFrameA表示两个刚体与两个约束之间的对应关系，为true时rbA对应frameInA，为false时交叉对应\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"224",valign:"top"}},[a("p",[t._v("\n                  btSliderConstraint(btRigidBody rbA, btTransform frameInA,\n                  boolean useLinearReferenceFrameA)\n                ")])]),t._v(" "),a("td",{attrs:{width:"344",valign:"top"}},[a("p",[t._v("\n                  滑动关节构造器，rbA为刚体，frameInA为从约束位置到刚体质心位置的变换，useLinearReferenceFrameA表示刚体与约束之间的对应关系\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("setUpperLinLimit ( float upperLimit)")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置滑动关节滑动距离上限")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("setLowerLinLimit ( float lowerLimit)")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置滑动关节滑动距离下限")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("getUpperLinLimit()")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("获取滑动距离的上限值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("getLowerLinLimit()")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("获取滑动距离的下限值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("setUpperAngLimit ( float upperLimit)")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置滑动关节转动角度上限")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("setLowerAngLimit ( float lowerLimit)")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置滑动关节转动角度下限")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("getUpperAngLimit()")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("获取转动角度的上限值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("getLowerAngLimit()")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("获取转动角度的下限值")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("setDampingDirLin(float dampingDirLin)")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置关节的滑动阻尼系数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("setDampingDirAng(float dampingDirAng)")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置关节的转动阻尼系数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("getDampingDirLin()")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("获取关节的滑动阻尼系数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("getDampingDirAng()")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("获取关节的转动阻尼系数")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("setPoweredLinMotor ( boolean onOff)")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置是否启动滑动对应的马达")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("setMaxLinMotorForce (float maxLinMotorForce)")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置驱动滑动马达的最大力")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("\n                  setTargetLinMotorVelocity (float targetLinMotorVelocity)\n                ")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置驱动滑动马达的速度")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("setPoweredAngMotor ( boolean onOff)")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置是否启动转动对应的马达")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("setMaxAngMotorForce (float maxAngMotorForce)")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置驱动转动马达的最大力")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"313",valign:"top"}},[a("p",[t._v("\n                  setTargetAngMotorVelocity (float targetangMotorVelocity)\n                ")])]),t._v(" "),a("td",{attrs:{width:"255",valign:"top"}},[a("p",[t._v("设置驱动转动马达的速度")])])])])]),t._v(" "),a("p",[a("strong",[t._v("3. 齿轮关节btGearConstraint：")])]),t._v(" "),a("p",[t._v("\n          为了模拟现实世界中齿轮之间的转动效果。 "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"275",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"293",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"275",valign:"top"}},[a("p",[t._v("\n                  btGearConstraint(btRigidBody rbA, btRigidBody rbB, btVector3\n                  axisA, btVector3 axisA, float ratio)\n                ")])]),t._v(" "),a("td",{attrs:{width:"293",valign:"top"}},[a("p",[t._v("\n                  齿轮关节构造器，rbA和rbB为两个刚体，axisA和axisB分别为两个刚体的轴向量，ratio为转动比例\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("setAxisA ( btVector3 axisA)")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("设置关联第1个刚体的轴向量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("setAxisB ( btVector3 axisB)")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("设置关联第2个刚体的轴向量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("setRatio ( ratio)")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("设置齿轮关节转动比例")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("gettAxisA()")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("获取关联第1个刚体的轴向量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("gettAxisB()")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("获取关联第1个刚体的轴向量")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("getRatio( )")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("获取齿轮关节的转动比例")])])])])]),t._v(" "),a("p",[a("strong",[t._v("4. 点对点关节btPoint2PointConstraint：")])]),t._v(" "),a("p",[t._v("\n          点对点关节模拟了两个物体上某两个点呈现连接效果。 "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"275",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"293",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"275",valign:"top"}},[a("p",[t._v("\n                  btPoint2PointConstraint(btRigidBody rbA, btRigidBody rbB,\n                  btVector3 pivotInA, btVector3 pivotInB)\n                ")])]),t._v(" "),a("td",{attrs:{width:"293",valign:"top"}},[a("p",[t._v("\n                  点对点约束构造器，rbA和rbB为两个刚体，pivotInA和pivotInB为关节分别在两个刚体坐标系中的位置\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"275",valign:"top"}},[a("p",[t._v("\n                  btPoint2PointConstraint(btRigidBody rbA, btVector3 pivotInA)\n                ")])]),t._v(" "),a("td",{attrs:{width:"293",valign:"top"}},[a("p",[t._v("点对点约束构造器，pivotInA为关节在此刚体坐标系中的位置")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("setPivotA ( btVector3 pivotA)")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("设置关节在第1个刚体坐标系中的位置")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("setPivotB ( btVector3 pivotB)")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("设置关节在第2个刚体坐标系中的位置")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("getPivotInA ()")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("获取关节在第1个刚体坐标系中的位置")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"241",valign:"top"}},[a("p",[t._v("getPivotInB ()")])]),t._v(" "),a("td",{attrs:{width:"327",valign:"top"}},[a("p",[t._v("获取关节在第2个刚体坐标系中的位置")])])])])]),t._v(" "),a("p",[a("strong",[t._v("5. 六自由度关节btGeneric6DofConstraint：")])]),t._v(" "),a("p",[t._v("\n          六自由度关节有6个不同的自由度，包括3个平移自由度和3个转动自由度，可以模拟动物关节及机械结构，如肘关节、颈关节、机械手臂等。通过锁死或限制此关节的某个或某几个自由度，可以模拟其他类型的关节。\n          "),a("br"),t._v("\n          1）构造器：\n        ")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"217",valign:"top"}},[a("p",[t._v("构造器")])]),t._v(" "),a("td",{attrs:{width:"351",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"217",valign:"top"}},[a("p",[t._v("\n                  btGeneric6DofConstraint(btRigidBody rbA, btRigidBody rbB,\n                  btTransform frameInA, btTransform frameInB, boolean\n                  useLinearReferenceFrameA)\n                ")])]),t._v(" "),a("td",{attrs:{width:"351",valign:"top"}},[a("p",[t._v("\n                  6自由度关节构造器，rbA和rbB为两个刚体，frameInA和frameInB分别为从约束位置到刚体质心位置的变换，useLinearReferenceFrameA表示两个刚体与两个约束之间的对应关系，为true时rbA对应frameInA，为false时交叉对应\n                ")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"217",valign:"top"}},[a("p",[t._v("\n                  btGeneric6DofConstraint(btRigidBody rbA, btTransform\n                  frameInA, boolean useLinearReferenceFrameA)\n                ")])]),t._v(" "),a("td",{attrs:{width:"351",valign:"top"}},[a("p",[t._v("\n                  6自由度关节构造器，rbA为刚体，frameInA为从约束位置到刚体质心位置的变换，useLinearReferenceFrameA表示两个刚体与两个约束之间的对应关系\n                ")])])])])]),t._v(" "),a("p",[t._v("2）方法：")]),t._v(" "),a("table",{attrs:{border:"1",cellspacing:"0"}},[a("tbody",[a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("方法")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("含义")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("setLinearUpperLimit (bt Vector3 linearUpper)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("设置关节3个滑动自由度距离的上限")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("setLinearLowerLimit ( btVector3 linearLower)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("设置关节3个滑动自由度距离的下限")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("seAngularUpperLimit ( btVector3 angularUpper)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("设置关节3个转动自由度距离的上限")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("setAngularLowerLimit ( btVector3 angularLower)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("设置关节3个转动自由度距离的下限")])])]),t._v(" "),a("tr",[a("td",{attrs:{width:"262",valign:"top"}},[a("p",[t._v("getAngular(int axis_index)")])]),t._v(" "),a("td",{attrs:{width:"306",valign:"top"}},[a("p",[t._v("获取指定轴的旋转角度，基于欧拉角的计算方法")])])])])])])])])])}]};var n=a("VU/8")(r,i,!1,function(t){a("kB9a")},null,null);v.default=n.exports},kB9a:function(t,v){}});